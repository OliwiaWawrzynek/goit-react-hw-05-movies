{"version":3,"file":"static/js/45.57667b61.chunk.js","mappings":"6PAIMA,EAASC,EAAAA,GAAAA,GACTC,EAAUD,EAAAA,GAAAA,GCJhB,OAAgB,OAAS,qBAAqB,KAAO,mBAAmB,SAAW,wB,kBCKpE,SAASE,IACtB,IACA,EFDa,SAAwBC,GACrC,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,uFAClBT,EADkB,uBAErBG,EAAU,IAFW,iCAMvBE,GAAa,GANU,kBAQEK,EAAAA,EAAAA,IAAA,UAClBZ,EADkB,iBACFE,EADE,4BACyBJ,EADzB,oBARF,OAWG,OAHlBe,EARe,QAWRC,OACXT,EAAUQ,EAASE,KAAKC,MAExBP,EAAS,gCAdU,kDAiBrBA,EAAS,KAAIQ,SAjBQ,QAmBvBV,GAAa,GAnBU,0DAAH,qDAsBtBI,GACD,GAAE,CAACT,IAEG,CAAEE,OAAAA,EAAQE,UAAAA,EAAWE,MAAAA,EAC7B,CE/BsCU,EADjBC,EAAAA,EAAAA,MAAZjB,SACAE,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UAAWE,EAA3B,EAA2BA,MAErBY,EAAY,IAAIC,IAUhBC,EAAkBlB,GAAUA,EAAOmB,KARd,SAACC,GAK1B,OAJIJ,EAAUK,IAAID,EAAME,MACtBF,EAAME,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAE7BT,EAAUU,IAAIN,EAAME,IACbF,CACR,IAID,OAAIlB,GACK,gBAAKyB,UAAWC,EAAAA,UAAhB,UACH,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,eAKzD/B,GACK,qCAAaA,KAGjBc,GAA8C,IAA3BA,EAAgBkB,QAKtC,iCACE,eAAIT,UAAWC,EAAAA,OAAf,qBACA,eAAID,UAAWC,EAAAA,KAAf,SACGV,EAAgBC,KAAI,SAACC,GAAD,OACnB,gBAAmBO,UAAWC,EAAAA,SAA9B,UACGR,EAAMiB,KADT,OACmBjB,EAAMkB,YADhBlB,EAAME,GADI,UAPlB,4DAeV,C","sources":["hooks/fetchMovieActors.jsx","webpack://react-homework-template/./src/pages/movieDetails/cast/Cast.module.css?e625","pages/movieDetails/cast/Cast.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiData from \"../data/apiData.json\";\n\nconst apiKey = apiData[0].apiKey;\nconst baseUrl = apiData[0].baseUrl;\n\nexport default function useMovieActors(movieId) {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieActors = async () => {\n      if (!movieId) {\n        setActors([]);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const response = await axios.get(\n          `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n        );\n        if (response.status === 200) {\n          setActors(response.data.cast);\n        } else {\n          setError(\"Error fetching movie actors.\");\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n    };\n\n    fetchMovieActors();\n  }, [movieId]);\n\n  return { actors, isLoading, error };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Cast_header__a+MSu\",\"list\":\"Cast_list__pb9Bg\",\"listItem\":\"Cast_listItem__EVYY0\"};","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useMovieActors from \"../../../hooks/fetchMovieActors\";\nimport css from \"./Cast.module.css\";\nimport { ColorRing } from \"react-loader-spinner\";\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const { actors, isLoading, error } = useMovieActors(movieId);\n\n  const uniqueIds = new Set();\n\n  const handleDuplicateIds = (actor) => {\n    if (uniqueIds.has(actor.id)) {\n      actor.id = Math.floor(Math.random() * 1000000);\n    }\n    uniqueIds.add(actor.id);\n    return actor;\n  };\n\n  const processedActors = actors && actors.map(handleDuplicateIds);\n\n  if (isLoading) {\n    return <div className={css.container}>\n        <ColorRing\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"blocks-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"blocks-wrapper\"\n          colors={[\"#e15b64\", \"#f47e60\", \"#f8b26a\", \"#abbd81\", \"#849b87\"]}\n      />\n    </div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!processedActors || processedActors.length === 0) {\n    return <div>No actors found for this movie.</div>;\n  }\n\n  return (\n    <>\n      <h1 className={css.header}>Actors</h1>\n      <ul className={css.list}>\n        {processedActors.map((actor) => (\n          <li key={actor.id} className={css.listItem}>\n            {actor.name} as {actor.character}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n"],"names":["apiKey","apiData","baseUrl","Cast","movieId","useState","actors","setActors","isLoading","setIsLoading","error","setError","useEffect","fetchMovieActors","axios","response","status","data","cast","message","useMovieActors","useParams","uniqueIds","Set","processedActors","map","actor","has","id","Math","floor","random","add","className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","length","name","character"],"sourceRoot":""}